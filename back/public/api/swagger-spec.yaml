openapi: 3.0.3
info:
  title: WLM API
  version: 1.0.0
  description: Remake of Windows Live Messenger (7.1)
servers:
  - url: http://localhost:3333/api
    description: API url
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registerValidator"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  "/auth/verify/{email}?signature={signature}":
    get:
      summary: Confirm account via signed url
      tags:
        - Authentication
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
            format: email
            example: bot@example.com
        - in: path
          name: signature
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example:
                            oneOf:
                              - Signature is missing or URL was tampered.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  /auth/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginValidator"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example:
                            oneOf:
                              - Invalid credentials.
                              - Invalid account.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  /auth/me:
    get:
      summary: Get authenticated user informations
      tags:
        - Authentication
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
  /auth/reset-password-demand:
    post:
      summary: Demand to reset password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/emailValidator"
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  "/auth/reset-password/{email}?signature={signature}":
    patch:
      summary: Reset password of a user
      tags:
        - Authentication
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
            format: email
            example: bot@example.com
        - in: path
          name: signature
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/resetPasswordValidator"
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example:
                            oneOf:
                              - Signature is missing or URL was tampered.
                              - Invalid credentials.
                              - Identical of previous passwords.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  /auth/logout:
    get:
      summary: Logout current authenticated user
      tags:
        - Authentication
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
  /blocked-user-relationship-logs/index-of-authenticated-user:
    get:
      summary: Return all blocked user relationship logs of authenticated user
      tags:
        - BlockedUserRelationshipLogs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlockedUserRelationshipLog"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
  "/blocked-user-relationship-logs/{id}":
    get:
      summary: Show a blocked user relationship log
      tags:
        - BlockedUserRelationshipLogs
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the BlockedUserRelationshipLog
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlockedUserRelationshipLog"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  /groups:
    get:
      summary: Return all groups
      tags:
        - Groups
      responses:
        "200":
          description: Return all groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
    post:
      summary: Store a group
      tags:
        - Groups
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/storeGroupValidator"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "400":
          description: No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  "/groups/{id}":
    get:
      summary: Show a group
      tags:
        - Groups
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the group
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
    put:
      summary: Update a group
      tags:
        - Groups
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the group
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/updateGroupValidator"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "400":
          description: No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Not FOund
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
    delete:
      summary: Delete a group
      tags:
        - Groups
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the group
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  /messages/history:
    get:
      summary: Return 10 last readed messages with at least one user
      tags:
        - Messages
      responses:
        "200":
          description: Return 10 last readed messages.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /messages/mark-as-readed:
    post:
      summary: Update one or more message(s), change status to readed
      tags:
        - Messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/markAsReadedTransmittedMessageValidator"
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example:
                            oneOf:
                              - Invalid credentials.
                              - Invalid account.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  /messages/store:
    post:
      summary: Store a message to at least one recipient
      tags:
        - Messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreMessage"
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example:
                            oneOf:
                              - Invalid credentials.
                              - Invalid account.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  /messages/unredead:
    post:
      summary: Get all unreaded messages
      tags:
        - Messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnreadedMessage"
      responses:
        "200":
          description: Return all unreaded messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          example:
                            oneOf:
                              - Invalid credentials.
                              - Invalid account.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  /user-relationships/index-of-authenticated-user:
    get:
      summary: Return all relationships of authenticated user
      tags:
        - UserRelationships
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRelationship"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
  "/user-relationships/{id}":
    get:
      summary: Show a UserRelationship
      tags:
        - UserRelationships
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the UserRelationship (a user)
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRelationship"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "E_AUTHORIZATION_FAILURE: Not authorized to perform this action"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
    put:
      summary: Update a UserRelationship
      tags:
        - UserRelationships
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the UserRelationship
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isHidden:
                  type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRelationship"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "E_AUTHORIZATION_FAILURE: Not authorized to perform this action"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  /user-relationships/store-or-makes-visible:
    post:
      summary: Add or makes visible a UserRelationship
      tags:
        - UserRelationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                relatedUserEmail:
                  type: string
                  format: email
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRelationship"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "E_AUTHORIZATION_FAILURE: Not authorized to perform this action"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  "/user-relationships/{id}/block":
    patch:
      summary: Block a userRelationships
      tags:
        - UserRelationships
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the UserRelationship
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "E_AUTHORIZATION_FAILURE: Not authorized to perform this action"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  "/user-relationships/{id}/unblock":
    patch:
      summary: Unblock a userRelationships
      tags:
        - UserRelationships
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the UserRelationship
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "E_AUTHORIZATION_FAILURE: Not authorized to perform this action"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  "/users/{id}":
    put:
      summary: Update a user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the user
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/updateUserValidator"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "400":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "E_AUTHORIZATION_FAILURE: Not authorized to perform this action"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
    delete:
      summary: Delete a user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the user
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "E_AUTHORIZATION_FAILURE: Not authorized to perform this action"
        "404":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  "/users/{id}/update-password":
    patch:
      summary: Update password of a user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the user
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updatePasswordUserValidator"
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "E_AUTHORIZATION_FAILURE: Not authorized to perform this action"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
  "/users/{id}/update-email":
    patch:
      summary: Update Email of a user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: uuid of the user
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateEmailUserValidator"
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "E_AUTHORIZATION_FAILURE: Not authorized to perform this action"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnprocessableEntity"
components:
  schemas:
    ClientError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
    UnprocessableEntity:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              rule:
                type: string
              field:
                type: string
              message:
                type: string
              args:
                type: object
                properties:
                  choices:
                    type: array
            required:
              - rule
              - field
              - message
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          maxLength: 36
          readOnly: true
        name:
          type: string
          example: aGroup
        userId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          maxLength: 36
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          maxLength: 36
          readOnly: true
        userId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          maxLength: 36
        content:
          type: string
        type:
          enum:
            - message
            - status
        createdAt:
          type: string
          format: date-time
          readOnly: true
        relatingUser:
          $ref: "#/components/schemas/User"
        relatedUsers:
          type: array
          items:
            $ref: "#/components/schemas/User"
        email:
          type: string
          format: email
          example: bot@example.com
          description: This field must be unique, an error will be thrown if it is not.
        rememberMeToken:
          type: string
          nullable: true
          readOnly: true
        username:
          type: string
          maxLength: 255
          example: aUsername
        personalMessage:
          type: string
          maxLength: 255
          example: A randum personal message
        status:
          type: string
          enum:
            - online
            - busy
            - beRightBack
            - away
            - onThePhone
            - outToLunch
            - appearOffline
          example: online
        avatar:
          type: string
          maxLength: 255
          example: /my-path/my-avatar-file.jpg
        firstName:
          type: string
          maxLength: 255
          pattern: ^(?:(?!×Þß÷þ)[A-Za-zÀ-ÿ' -])+$
          example: aFirstName
        lastName:
          type: string
          maxLength: 255
          pattern: ^(?:(?!×Þß÷þ)[A-Za-zÀ-ÿ' -])+$
          example: aLastName
        gender:
          type: string
          enum:
            - male
            - female
            - unbinary
          example: unbinary
        birthYear:
          type: number
          minimum: 1892
          maximum: 2022
          nullable: true
          example: 1990
        alternateEmail:
          type: string
          format: email
          description: This field must different of email
          example: anAlternativeMail@domain.com
        country:
          type: string
          maxLength: 255
          default: france
          example: france
        state:
          type: string
          maxLength: 255
          nullable: true
          example: loire
        zipCode:
          type: string
          maxLength: 5
          pattern: /^(?:2A|2B|\d{2})\d{3}$/
          nullable: true
          example: "42100"
        verifiedAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    UserRelationship:
      type: object
      properties:
        relatingUserId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          maxLength: 36
          readOnly: true
        relatedUserId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          maxLength: 36
          readOnly: true
        relatingUser:
          nullable: true
          type: object
          $ref: "#/components/schemas/User"
        relatedUser:
          nullable: true
          type: object
          $ref: "#/components/schemas/User"
        isBlocked:
          type: boolean
        isHidden:
          type: boolean
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
    emailValidator:
      type: object
      properties:
        email:
          type: string
          format: email
          example: bot@example.com
      required:
        - email
    loginValidator:
      type: object
      properties:
        email:
          type: string
          format: email
          example: bot@example.com
        password:
          type: string
          example: TESTtest1234.
        remember:
          type: boolean
          example: true
      required:
        - email
        - password
    registerValidator:
      type: object
      properties:
        email:
          type: string
          format: email
          example: bot@example.com
          maxLength: 255
          description: This field must be unique, an error will be thrown if it is not.
        password:
          type: string
          format: regex
          maxLength: 180
          minLength: 12
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: TESTtest1234.
        passwordConfirmation:
          type: string
          format: regex
          maxLength: 180
          minLength: 12
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: TESTtest1234.
          description: Must be equal to password field
        firstName:
          type: string
          maxLength: 255
          pattern: /^(?:(?!×Þß÷þ)[A-Za-zÀ-ÿ' -])+$/
          example: bot
        lastName:
          type: string
          maxLength: 255
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: example
        gender:
          type: string
          enum:
            - male
            - female
            - unbinary
          example: unbinary
        birthYear:
          type: number
          minimum: 1892
          maximum: 2022
          example: 2004
        alternateEmail:
          type: string
          format: email
          maxLength: 255
          description: This field must different of email
          example: anAlternativeMail@domain.com
        state:
          type: string
          maxLength: 255
          nullable: true
          pattern: /^(?:(?!×Þß÷þ)[A-Za-zÀ-ÿ' -])+$/
          example: loire
        zipCode:
          type: string
          maxLength: 5
          pattern: /^(?:2A|2B|\d{2})\d{3}$/
          example: 42100
      required:
        - email
        - password
        - passwordConfirmation
        - firstName
        - lastName
        - gender
        - alternateEmail
    resetPasswordValidator:
      type: object
      properties:
        password:
          type: string
          format: regex
          maxLength: 180
          minLength: 12
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: TESTtest1234.
        passwordConfirmation:
          type: string
          format: regex
          maxLength: 180
          minLength: 12
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: TESTtest1234.
          description: Must be equal to password field
      required:
        - password
        - passwordConfirmation
    storeGroupValidator:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
      required:
        - name
    updateGroupValidator:
      type: object
      properties:
        params:
          type: object
          properties:
            id:
              type: string
              format: uuid
        name:
          type: string
          maxLength: 255
    latestMessageValidator:
      type: object
      properties:
        params:
          type: object
          properties:
            userIds:
              type: array
              items:
                type: string
                format: uuid
    markAsReadedTransmittedMessageValidator:
      type: object
      properties:
        params:
          type: object
          properties:
            messageIds:
              type: array
              items:
                type: string
                format: uuid
    updatePasswordUserValidator:
      type: object
      properties:
        params:
          type: object
          properties:
            userIds:
              type: array
              items:
                type: string
                format: uuid
            id:
              type: string
              format: uuid
          content:
            type: string
        oldPassword:
          type: string
        newPassword:
          type: string
          format: regex
          maxLength: 180
          minLength: 12
          description: newPassword mus be different of oldPassword
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: testTest1234.
        passwordConfirmation:
          type: string
          format: regex
          maxLength: 180
          minLength: 12
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: testTest1234.
          description: Must be equal to password field
    updateEmailUserValidator:
      type: object
      properties:
        params:
          type: object
          properties:
            id:
              type: string
              format: uuid
        oldEmail:
          type: string
          format: email
          example: exemple@domain.com
          maxLength: 74
        newEmail:
          type: string
          format: email
          example: exemple@domain.com
          maxLength: 74
          description: This field must be unique, an error will be thrown if it is not.
    updateUserValidator:
      type: object
      properties:
        email:
          type: string
          format: email
          example: exemple@domain.com
          maxLength: 74
          description: This field must be unique, an error will be thrown if it is not.
        password:
          type: string
          format: regex
          maxLength: 180
          minLength: 12
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: testTest1234.
        passwordConfirmation:
          type: string
          format: regex
          maxLength: 180
          minLength: 12
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: testTest1234.
          description: Must be equal to password field
        username:
          type: string
          maxLength: 255
          example: aUsername
        status:
          enum:
            - online
            - busy
            - beRightBack
            - away
            - onThePhone
            - outToLunch
            - appearOffline
          maxLength: 255
          example: online
        personalMessage:
          type: string
          maxLength: 255
          example: My personal message
        firstName:
          type: string
          maxLength: 255
          pattern: /^(?:(?!×Þß÷þ)[A-Za-zÀ-ÿ' -])+$/
          example: aFirstName
        lastName:
          type: string
          maxLength: 255
          pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[\w\W]{12,}$/
          example: aLastName
        gender:
          type: string
          enum:
            - male
            - female
            - unbinary
          example: unbinary
        birthYear:
          type: number
          minimum: 1892
          maximum: 2022
          example: 1990
        alternateEmail:
          type: string
          format: email
          maxLength: 255
          description: This field must different of email
          example: anAlternativeMail@domain.com
        state:
          type: string
          maxLength: 255
          nullable: true
          pattern: /^(?:(?!×Þß÷þ)[A-Za-zÀ-ÿ' -])+$/
          example: loire
        zipCode:
          type: string
          maxLength: 5
          pattern: /^(?:2A|2B|\d{2})\d{3}$/
          example: 42100
        avatar:
          type: string
          format: binary
          description: max size of file = 2mb, Extension accepted = jpeg,jpg,gif,webp,png
tags:
  - name: Authentication
    description: Everything about Authentication
  - name: Users
    description: Everything about Users
  - name: UserRelationships
    description: Everything about UserRelationships
  - name: Groups
    description: Everything about Groups
  - name: BlockedUserRelationshipLogs
    description: Everything about BlockedUserRelationshipLogs
  - name: Messages
    description: Everything about Messages
